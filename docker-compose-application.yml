version: '3.5'

services:
  machine-agent:
    container_name: machine-agent
    hostname: machine-agent
    image: appdynamics/machine-agent-analytics:latest
    env_file: controller.env
    environment:
      - APPDYNAMICS_SIM_ENABLED=true
      - APPDYNAMICS_DOCKER_ENABLED=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/hostroot:ro
    expose:
      - 9090

########################################################
### Java
########################################################

  web-api:
    container_name: web-api
    hostname: web-api
    restart: always
    image: fernandodumont/web-api
    expose:
      - 8080
    ports:
      - "8080:8080"
    volumes:
      - java-agent-volume:/opt/appdynamics/java-agent/
    env_file: controller.env
    environment:
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/appdynamics/java-agent/javaagent.jar
      - APPDYNAMICS_AGENT_TIER_NAME=web-api
      - APPDYNAMICS_AGENT_NODE_NAME=web-api-1

  api-services:
    container_name: api-services
    hostname: api-services
    restart: always
    image: fernandodumont/java-services
    expose:
      - 8080
    volumes:
      - java-agent-volume:/opt/appdynamics/java-agent/
    env_file: controller.env
    environment:
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/appdynamics/java-agent/javaagent.jar
      - APPDYNAMICS_AGENT_TIER_NAME=api-services
      - APPDYNAMICS_AGENT_NODE_NAME=api-services-1

  customer-services:
    container_name: customer-services
    hostname: customer-services
    restart: always
    image: fernandodumont/java-services
    expose:
      - 8080
    depends_on:
      - kafka
    volumes:
      - java-agent-volume:/opt/appdynamics/java-agent/
    env_file: controller.env
    environment:
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/appdynamics/java-agent/javaagent.jar
      - APPDYNAMICS_AGENT_TIER_NAME=customer-services
      - APPDYNAMICS_AGENT_NODE_NAME=customer-services-1
      - MONGO_HOST=10.20.4.100
      - MONGO_PORT=27017

  approval-services:
    container_name: approval-services
    hostname: approval-services
    restart: always
    image: fernandodumont/java-services
    expose:
      - 8080
    volumes:
      - java-agent-volume:/opt/appdynamics/java-agent/
    env_file: controller.env
    environment:
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/appdynamics/java-agent/javaagent.jar
      - APPDYNAMICS_AGENT_TIER_NAME=approval-services
      - APPDYNAMICS_AGENT_NODE_NAME=approval-services-1
      - SAP_SERVICES=10.20.2.100
      - SAP_SERVICES_PORT=8080

  ticket-services:
    container_name: ticket-services
    hostname: ticket-services
    restart: always
    image: fernandodumont/java-services
    depends_on:
      - kafka
    volumes:
      - java-agent-volume:/opt/appdynamics/java-agent/
      - ./custom-interceptors.xml:/opt/appdynamics/java-agent/conf/custom-interceptors.xml
    env_file: controller.env
    environment:
      - TOPIC_LIST=customer-services
      - KAFKA_LISTENER_CLASS=com.java.acme.kafka.TicketServicesKafkaListener
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/appdynamics/java-agent/javaagent.jar
      - APPDYNAMICS_AGENT_TIER_NAME=ticket-services
      - APPDYNAMICS_AGENT_NODE_NAME=ticket-services-1
      - MONGO_HOST=10.20.4.100
      - MONGO_PORT=27017
      - FRAUD_SERVICES=10.20.2.100
      - FRAUD_SERVICES_PORT=8080

  booking-services:
    container_name: booking-services
    hostname: booking-services
    restart: always
    image: fernandodumont/java-services
    depends_on:
      - kafka
    volumes:
      - java-agent-volume:/opt/appdynamics/java-agent/
      - ./custom-interceptors.xml:/opt/appdynamics/java-agent/conf/custom-interceptors.xml
    env_file: controller.env
    environment:
      - TOPIC_LIST=customer-services
      - KAFKA_LISTENER_CLASS=com.java.acme.kafka.BookingServicesKafkaListener
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/appdynamics/java-agent/javaagent.jar
      - APPDYNAMICS_AGENT_TIER_NAME=booking-services
      - APPDYNAMICS_AGENT_NODE_NAME=booking-services-1

########################################################
### NodeJS
########################################################

  flight-services:
    container_name: flight-services
    hostname: flight-services
    restart: always
    image: fernandodumont/nodejs-services
    expose:
      - 8080
    env_file: controller.env
    environment:
      - APPDYNAMICS_AGENT_TIER_NAME=flight-services
      - APPDYNAMICS_AGENT_NODE_NAME=flight-services-1
      - APP_ENTRY_POINT=/src/index.js
    command: ["/bin/sh", "-c", "/src/nodeStart.sh"]
    volumes:
      - ./shim.js:/src/shim.js
      - ./nodeStart.sh:/src/nodeStart.sh

  offer-services:
    container_name: offer-services
    hostname: offer-services
    restart: always
    image: fernandodumont/nodejs-services
    expose:
      - 8080
    env_file: controller.env
    environment:
      - APPDYNAMICS_AGENT_TIER_NAME=offer-services
      - APPDYNAMICS_AGENT_NODE_NAME=offer-services-1
      - APP_ENTRY_POINT=/src/index.js
      - MYSQL_HOST=10.20.4.100
    command: ["/bin/sh", "-c", "/src/nodeStart.sh"]
    volumes:
      - ./shim.js:/src/shim.js
      - ./nodeStart.sh:/src/nodeStart.sh

  search-services:
    container_name: search-services
    hostname: search-services
    restart: always
    image: fernandodumont/nodejs-services
    expose:
      - 8080
    env_file: controller.env
    environment:
      - APPDYNAMICS_AGENT_TIER_NAME=search-services
      - APPDYNAMICS_AGENT_NODE_NAME=search-services-1
      - APP_ENTRY_POINT=/src/index.js
    command: ["/bin/sh", "-c", "/src/nodeStart.sh"]
    volumes:
      - ./shim.js:/src/shim.js
      - ./nodeStart.sh:/src/nodeStart.sh

  auth-services:
    container_name: auth-services
    hostname: auth-services
    restart: always
    image: fernandodumont/nodejs-services
    expose:
      - 8080
    env_file: controller.env
    environment:
      - APPDYNAMICS_AGENT_TIER_NAME=auth-services
      - APPDYNAMICS_AGENT_NODE_NAME=auth-services-1
      - APP_ENTRY_POINT=/src/index.js
      - MONGO_HOST=10.20.4.100
      - MONGO_PORT=27018
    command: ["/bin/sh", "-c", "/src/nodeStart.sh"]
    volumes:
      - ./shim.js:/src/shim.js
      - ./nodeStart.sh:/src/nodeStart.sh

########################################################
### GoLang
########################################################

  search-api:
    container_name: search-api
    hostname: search-api
    restart: always
    image: fernandodumont/go-services
    env_file: controller.env
    environment:
      - TIER_NAME=search-api
    expose:
      - 8080

  caching-services:
    container_name: caching-services
    hostname: caching-services
    restart: always
    image: fernandodumont/go-services
    env_file: controller.env
    environment:
      - TIER_NAME=caching-services
    expose:
      - 8080

########################################################
### Kafka, databases, and other backends
########################################################
  zookeeper:
    container_name: zookeeper
    restart: always
    image: jdbarfield/zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    image: jdbarfield/kafka4:latest
    container_name: kafka
    restart: always
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=flight-services,customer-services
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_PORT=9092
    depends_on:
      - zookeeper

  java-agent:
    container_name: java-agent
    hostname: java-agent
    image: appdynamics/java-agent:latest
    volumes:
      - java-agent-volume:/opt/appdynamics

volumes:
  java-agent-volume:
